{"version":3,"sources":["candy-machine.ts","Footer.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","price","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","shortenAddress","address","chars","slice","ms","Footer","className","target","rel","href","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","Button","projectName","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","setItemsAvailable","setItemsRemaining","mintPriceInSol","setMintPriceInSol","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","onMint","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","useEffect","src","height","alt","title","width","toBase58","toLocaleString","disabled","onClick","variant","color","CircularProgress","date","onMount","onComplete","renderer","Snackbar","autoHideDuration","onClose","Alert","process","network","Connection","startDateSeed","parseInt","theme","createTheme","palette","type","primary","main","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","margin","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07303873.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection;\n  program: anchor.Program;\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  goLiveDate: Date,\n  price: number\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      await (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses( [\n            txid,\n          ] );\n          status = signatureStatuses && signatureStatuses.value[0];\n          if ( !done ) {\n            if ( !status ) {\n              console.log( \"REST null result for\", txid, status );\n            } else if ( status.err ) {\n              console.log( \"REST error for\", txid, status );\n              done = true;\n              reject( status.err );\n            } else if ( !status.confirmations ) {\n              console.log( \"REST no confirmations for\", txid, status );\n            } else {\n              console.log( \"REST confirmation for\", txid, status );\n              done = true;\n              resolve( status );\n            }\n          }\n        } catch ( e ) {\n          if ( !done ) {\n            console.log( \"REST connection error: txid\", txid, e );\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  );\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const price = state.data.price.toNumber(); // lamports\n\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n    price\n  };\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const { connection, program } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  );\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  });\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}","import './Footer.css';\n\nexport default function Footer() {\n    return (\n        <ul className=\"footer\">\n            <li>\n                <a target=\"_blank\" rel=\"noreferrer\" href=\"https://steve-lab.gitbook.io/steve-s-3000/\">GitBook</a> |\n            </li>\n            <li>\n                <a target=\"_blank\" rel=\"noreferrer\" href=\"https://twitter.com/steves3000\">Twitter</a> |\n            </li>\n            <li>\n                <a target=\"_blank\" rel=\"noreferrer\" href=\"https://discord.gg/M4tWcxUhqJ\">Discord</a>\n            </li>\n        </ul>\n    );\n}","import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Countdown from 'react-countdown';\nimport { Button, CircularProgress, Snackbar } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\n\nimport './Home.css';\n\nimport * as anchor from '@project-serum/anchor';\n\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nimport { useAnchorWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\n\nimport {\n    CandyMachine,\n    awaitTransactionSignatureConfirmation,\n    getCandyMachineState,\n    mintOneToken,\n    shortenAddress,\n} from './candy-machine';\nimport Footer from './Footer';\n\nconst ConnectButton = styled( WalletDialogButton )`\n    margin: 1rem 0 !important;\n`;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div`\n    text-align: center;\n`;\n\nconst MintButton = styled( Button )`\n    margin: 1rem 0 !important;\n`;\n\nexport interface HomeProps {\n    candyMachineId: anchor.web3.PublicKey;\n    config: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    startDate: number;\n    treasury: anchor.web3.PublicKey;\n    txTimeout: number;\n}\n\nconst projectName = 'Steve\\'s 3000';\n\nconst Home = ( props: HomeProps ) => {\n    const [ balance, setBalance ] = useState<number>();\n    const [ isActive, setIsActive ] = useState( false ); // true when countdown completes\n    const [ isSoldOut, setIsSoldOut ] = useState( false ); // true when items remaining is zero\n    const [ isMinting, setIsMinting ] = useState( false ); // true when user got to press MINT\n    const [ itemsAvailable, setItemsAvailable ] = useState<number>();\n    const [ itemsRemaining, setItemsRemaining ] = useState<number>();\n    const [ mintPriceInSol, setMintPriceInSol ] = useState<number>( 0 );\n\n    const [ alertState, setAlertState ] = useState<AlertState>( {\n        open: false,\n        message: '',\n        severity: undefined,\n    } );\n\n    const [ startDate, setStartDate ] = useState( new Date( props.startDate ) );\n\n    const wallet = useAnchorWallet();\n    const [ candyMachine, setCandyMachine ] = useState<CandyMachine>();\n\n    const onMint = async () => {\n        try {\n            setIsMinting( true );\n            if ( wallet && candyMachine?.program ) {\n                const mintTxId = await mintOneToken(\n                    candyMachine,\n                    props.config,\n                    wallet.publicKey,\n                    props.treasury\n                );\n\n                const status = await awaitTransactionSignatureConfirmation(\n                    mintTxId,\n                    props.txTimeout,\n                    props.connection,\n                    'singleGossip',\n                    false\n                );\n\n                if ( !status?.err ) {\n                    setAlertState( {\n                        open: true,\n                        message: 'Congratulations! Mint succeeded!',\n                        severity: 'success',\n                    } );\n                } else {\n                    setAlertState( {\n                        open: true,\n                        message: 'Mint failed! Please try again!',\n                        severity: 'error',\n                    } );\n                }\n            }\n        } catch ( error: any ) {\n            let message = error.msg || 'Minting failed! Please try again!';\n            if ( !error.msg ) {\n                if ( error.message.indexOf( '0x138' ) ) {\n                } else if ( error.message.indexOf( '0x137' ) ) {\n                    message = `SOLD OUT!`;\n                } else if ( error.message.indexOf( '0x135' ) ) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if ( error.code === 311 ) {\n                    message = `SOLD OUT!`;\n                    setIsSoldOut( true );\n                } else if ( error.code === 312 ) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState( {\n                open: true,\n                message,\n                severity: 'error',\n            } );\n        } finally {\n            if ( wallet ) {\n                const balance = await props.connection.getBalance( wallet.publicKey );\n                setBalance( balance / LAMPORTS_PER_SOL );\n            }\n            setIsMinting( false );\n        }\n    };\n\n    useEffect( () => {\n        (async () => {\n            if ( wallet ) {\n                const balance = await props.connection.getBalance( wallet.publicKey );\n                setBalance( balance / LAMPORTS_PER_SOL );\n            }\n        })();\n    }, [ wallet, props.connection ] );\n\n    useEffect( () => {\n        (async () => {\n            if ( !wallet ) return;\n\n            const { candyMachine, goLiveDate, itemsRemaining, itemsAvailable, price } =\n                await getCandyMachineState(\n                    wallet as anchor.Wallet,\n                    props.candyMachineId,\n                    props.connection\n                );\n\n            setIsSoldOut( itemsRemaining === 0 );\n            setStartDate( goLiveDate );\n            setCandyMachine( candyMachine );\n            setItemsAvailable( itemsAvailable );\n            setItemsRemaining( itemsRemaining );\n            setMintPriceInSol( price / LAMPORTS_PER_SOL );\n        })();\n    }, [ wallet, props.candyMachineId, props.connection ] );\n\n    return (\n        <main>\n\n            <div className=\"logo\">\n                <img src=\"logo.png\" height={ 96 } alt={ projectName } title={ projectName }/>\n                <h1>{ projectName }</h1>\n            </div>\n\n            <h3>Public Sale price 0.69 SOL for 1 NFT</h3>\n\n            <div className=\"collection\">\n                <img src=\"collection.gif\" width={ 475 } alt={ projectName } title={ projectName }/>\n            </div>\n\n            <div className=\"content\">\n                { wallet && (\n                    <p>Address: { shortenAddress( wallet.publicKey.toBase58() || '' ) }</p>\n                ) }\n\n                { wallet && (\n                    <p>Items available: { itemsRemaining } / { itemsAvailable }</p>\n                ) }\n\n                { wallet && (\n                    <p>Balance: { (balance || 0).toLocaleString() } SOL</p>\n                ) }\n\n                <MintContainer>\n                    { !wallet ? (\n                        <ConnectButton>Connect Wallet</ConnectButton>\n                    ) : (\n                        <MintButton\n                            disabled={ isSoldOut || isMinting || !isActive }\n                            onClick={ onMint }\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            { isSoldOut ? (\n                                'SOLD OUT'\n                            ) : isActive ? (\n                                isMinting ? (\n                                    <CircularProgress/>\n                                ) : (\n                                    `Purchase for ${mintPriceInSol} SOL`\n                                )\n                            ) : (\n                                <Countdown\n                                    date={ startDate }\n                                    onMount={ ( { completed } ) => completed && setIsActive( true ) }\n                                    onComplete={ () => setIsActive( true ) }\n                                    renderer={ renderCounter }\n                                />\n                            ) }\n                        </MintButton>\n                    ) }\n                </MintContainer>\n\n                <Snackbar\n                    open={ alertState.open }\n                    autoHideDuration={ 6000 }\n                    onClose={ () => setAlertState( { ...alertState, open: false } ) }\n                >\n                    <Alert\n                        onClose={ () => setAlertState( { ...alertState, open: false } ) }\n                        severity={ alertState.severity }\n                    >\n                        { alertState.message }\n                    </Alert>\n                </Snackbar>\n            </div>\n\n            <Footer/>\n        </main>\n    );\n};\n\ninterface AlertState {\n    open: boolean;\n    message: string;\n    severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nconst renderCounter = ( { days, hours, minutes, seconds, completed }: any ) => {\n    return (\n        <CounterText>\n            { hours } hours, { minutes } minutes, { seconds } seconds\n        </CounterText>\n    );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst treasury = new anchor.web3.PublicKey(\n  process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst config = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\n);\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#ffe66e'\n        }\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start'\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                margin: undefined,\n                padding: '4px 6px'\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network })\n    ],\n    []\n  );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect>\n            <WalletDialogProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                config={config}\n                connection={connection}\n                startDate={startDateSeed}\n                treasury={treasury}\n                txTimeout={txTimeout}\n              />\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}